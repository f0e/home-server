services:
  # media server
  streaming-plex:
    container_name: streaming-plex
    image: ghcr.io/hotio/plex
    devices:
      - /dev/dri:/dev/dri
    environment:
      - PLEX_UID=1000
      - PLEX_GID=1000
      - UMASK=002
      - PLEX_ADVERTISE_URL=${PLEX_ADVERTISE_URLS}
    ports:
      - 32400:32400
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/plex:/config
      - ${MEDIA_STREAMING_LOCATION}/media:/server/data/streaming
      - ${MEDIA_LOCAL_LOCATION}/media:/server/data/local
      - ${TRANSCODES_LOCATION}/streaming-plex:/transcode
      - ${DEBUG_LOCATION}/PlexDBRepair:/PlexDBRepair
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
    networks:
      - default
      - local-services
      - proxy-tailscale
    depends_on:
      streaming-decypharr:
        condition: service_healthy
    restart: unless-stopped

  # media requests
  streaming-overseerr:
    container_name: streaming-overseerr
    image: ghcr.io/hotio/overseerr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/overseerr:/config
    ports:
      - :5055
    networks:
      - default
      - local-services
    restart: unless-stopped

  # debrid manager + webdav
  streaming-decypharr:
    container_name: streaming-decypharr
    image: cy01/blackhole:latest # or cy01/blackhole:beta
    ports:
      - 8282:8282 # qBittorrent
      - 8181:8181 # Proxy
    user: 1000:1000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_STREAMING_LOCATION}/downloading/decypharr:/server/data/streaming/downloading/decypharr
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
      - ${CONFIG_LOCATION}/decypharr:/app
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
    restart: unless-stopped
    depends_on:
      streaming-sonarr:
        condition: service_started
      streaming-radarr:
        condition: service_started

  # media download managers
  streaming-radarr:
    container_name: streaming-radarr
    image: ghcr.io/hotio/radarr:release
    environment:
      - PUID=1000
      - PGID=1000
    ports:
      - :7878
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/radarr:/config
      - ${MEDIA_STREAMING_LOCATION}:/server/data/streaming
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
    networks:
      - default
      - local-services
    restart: unless-stopped

  streaming-sonarr:
    container_name: streaming-sonarr
    image: ghcr.io/hotio/sonarr:release
    environment:
      - PUID=1000
      - PGID=1000
    ports:
      - :8989
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/sonarr:/config
      - ${MEDIA_STREAMING_LOCATION}:/server/data/streaming
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
    networks:
      - default
      - local-services
    restart: unless-stopped

  # indexer manager
  streaming-prowlarr:
    container_name: streaming-prowlarr
    image: ghcr.io/hotio/prowlarr:release
    environment:
      - PUID=1000
      - PGID=1000
    ports:
      - :9696
    networks:
      - default
      - local-services
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/prowlarr:/config
      - ${MEDIA_STREAMING_LOCATION}:/server/data/streaming
      - ${CUSTOM_LOCATION}/prowlarr-indexers/Custom:/config/Definitions/Custom
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
    depends_on:
      - streaming-flaresolverr
    restart: unless-stopped

  # download manager configurator
  streaming-recyclarr:
    container_name: streaming-recyclarr
    image: ghcr.io/recyclarr/recyclarr
    env_file:
      - recyclarr.env
    environment:
      - CRON_SCHEDULE=@daily
      - RECYCLARR_CREATE_CONFIG=true
    user: 1000:1000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/recyclarr:/config

  # subtitle downloader
  streaming-bazarr:
    container_name: streaming-bazarr
    image: ghcr.io/hotio/bazarr
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/bazarr:/config
      - ${MEDIA_STREAMING_LOCATION}:/server/data/streaming
      - ${CUSTOM_LOCATION}/subcleaner:/server/custom/subcleaner
      - ${MEDIA_MOUNTS_LOCATION}:${MEDIA_MOUNTS_LOCATION}:rslave
    ports:
      - :6767
    networks:
      - default
      - local-services
    depends_on:
      streaming-decypharr:
        condition: service_healthy
    restart: unless-stopped

  # misc
  streaming-flaresolverr:
    container_name: streaming-flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    environment:
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
    ports:
      - :8191
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped

  streaming-plexautolanguages:
    container_name: streaming-plexautolanguages
    image: remirigal/plex-auto-languages:latest
    env_file:
      - plexautolanguages.env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/plexautolanguages:/config

  # plex library customisation tool
  streaming-kometa:
    container_name: streaming-kometa
    image: kometateam/kometa
    # environment:
    #   - KOMETA_RUN=true
    #   - KOMETA_IGNORE_SCHEDULES=true
    env_file:
      - kometa.env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/kometa:/config
    networks:
      - default
      - local-services
    depends_on:
      - streaming-plex
      - streaming-radarr
      - streaming-sonarr
    restart: unless-stopped

  # scripts
  streaming-daps:
    container_name: streaming-daps
    image: drazzilb08/daps
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/daps:/config
      - ${CONFIG_LOCATION}/kometa/assets:/kometa
      - ${POSTERS_LOCATION}/posters:/posters
      - ${MEDIA_STREAMING_LOCATION}/media:/media
    depends_on:
      - streaming-plex
      - streaming-radarr
      - streaming-sonarr
    restart: unless-stopped

  # debrid media manager scraper/indexer
  streaming-zilean:
    container_name: streaming-zilean
    image: ipromknight/zilean:latest
    restart: unless-stopped
    tty: true
    ports:
      - :8181
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - zilean_data:/app/data
      - zilean_tmp:/tmp
      - ${CONFIG_LOCATION}/zilean/settings.json:/app/data/settings.json
    healthcheck:
      test: curl --connect-timeout 10 --silent --show-error --fail http://localhost:8181/healthchecks/ping
      timeout: 60s
      interval: 30s
      retries: 10
    depends_on:
      streaming-decypharr:
        condition: service_healthy
      streaming-postgres:
        condition: service_healthy

  streaming-comet:
    image: g0ldyy/comet
    container_name: streaming-comet
    restart: unless-stopped
    ports:
      - 8000:8000
    env_file:
      - comet.env
    volumes:
      - ${CONFIG_LOCATION}/comet:/data
    networks:
      - default
      - local-services
    
  streaming-comet-jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: streaming-comet-jackett
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_LOCATION}/jackett/config:/config
      - ${CONFIG_LOCATION}/jackett/downloads:/downloads
    ports:
      - :9117
    restart: unless-stopped
    networks:
      - default
      - local-services

  # torrentio indexer
  streaming-tweakio:
    container_name: streaming-tweakio
    image: varthe/tweakio:latest
    hostname: tweakio
    ports:
      - 3185:3185
    volumes:
      - ${CONFIG_LOCATION}/tweakio/config.yaml:/app/config.yaml
    restart: unless-stopped

  # databases
  streaming-postgres:
    image: postgres:16.3-alpine3.20
    container_name: streaming-postgres
    restart: unless-stopped
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: $ZILEAN_POSTGRES_PASSWORD
      POSTGRES_DB: zilean
    ports:
      - :5957
    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    shm_size: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  streaming-pgadmin:
    image: dpage/pgadmin4
    container_name: streaming-pgadmin
    ports:
      - 6080:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=$PGADMIN_EMAIL
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PASSWORD
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    entrypoint: /bin/sh -c "chmod 600 /pgpass; /entrypoint.sh;"
    user: root
    configs:
      - source: pgadmin_servers.json
        target: /pgadmin4/servers.json
      - source: pgadmin_pgpass
        target: /pgpass
    depends_on:
      streaming-postgres:
        condition: service_healthy

volumes:
  zilean_data:
  zilean_tmp:
  pg_data:

networks:
  default:
    # default network for every container
    name: streaming-network-default # since the key has to be default this is the actual name
    driver: bridge
  local-services:
    external: true
  proxy-tailscale:
    external: true

configs:
  pgadmin_pgpass:
    content: streaming-postgres:5957:*:postgres:$ZILEAN_POSTGRES_PASSWORD
  pgadmin_servers.json:
    content: |
      {
        "Servers": {
        "1": {
            "Group": "Servers",
            "Name": "Zilean Database",
            "Host": "streaming-postgres",
            "Port": 5957,
            "MaintenanceDB": "zilean",
            "Username": "postgres",
            "PassFile": "/pgpass",
            "SSLMode": "prefer"
          }
        }
      }
