
{
	# admin 0.0.0.0:2019

	### for testing
	# acme_ca https://acme-staging-v02.api.letsencrypt.org/directory

	email {$SSL_EMAIL}
}

## It is important to read the following document before enabling this section:
## https://www.authelia.com/integration/proxies/caddy/#trusted-proxies
(trusted_proxy_list) {
	## Uncomment & adjust the following line to configure specific ranges which should be considered as trustworthy.
	# trusted_proxies 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 fc00::/7
}

(authelia) {
	forward_auth authelia:9091 {
		uri /api/authz/forward-auth
		## The following commented line is for configuring the Authelia URL in the proxy. We strongly suggest
		## this is configured in the Session Cookies section of the Authelia configuration.
		# uri /api/authz/forward-auth?authelia_url=https://auth.example.com/
		copy_headers Remote-User Remote-Groups Remote-Email Remote-Name

		## This import needs to be included if you're relying on a trusted proxies configuration.
		import trusted_proxy_list
	}
}

{$CUSTOM_DOMAIN}, *.{$CUSTOM_DOMAIN} {
	tls {
		dns cloudflare {$CF_API_TOKEN} # note: https://caddy.community/t/getting-certificate-from-letsencrypt-jws-verification-error/25389/15 got jws verification error stuff one time preventing cert renewal, fix was deleting caddy folder in caddy/data and letting it recreate all the certs and stuff. shouldn't happen again?
		resolvers 1.1.1.1 # think this is required? whatever, it's working now so i'll just leave it
		propagation_timeout 10m # important, doesn't update quick enough by default (for whatever reason..)
	}

	log {
		output file /data/access-internal.log
	}

	# only allow local access (redundant, but just in case)
	@denied not remote_ip private_ranges
	abort @denied
	
	encode zstd gzip

	# auth
	@auth host auth.{$CUSTOM_DOMAIN}
	handle @auth {
		reverse_proxy authelia:9091 {
			import trusted_proxy_list
		}
	}

	# public
	@homepage host {$CUSTOM_DOMAIN}
	handle @homepage {
		# import authelia
		# TODO: show index.html when not logged in, auth.html when logged in
		
		root * /homepage
		file_server {
			index auth.html
		}
	}

	@speedtest host speedtest.{$CUSTOM_DOMAIN}
	handle @speedtest {
		reverse_proxy openspeedtest:3000
	}

	# public (under auth)
	@paperless host paperless.{$CUSTOM_DOMAIN}
	handle @paperless {
		import authelia
		reverse_proxy paperless-ngx:8000
	}
	
	@owntracks host owntracks.{$CUSTOM_DOMAIN}
	handle @owntracks {
		import authelia
		reverse_proxy owntracks-frontend:80
	}

	# public (has their own auth) TODO: oauth?
	@immich host immich.{$CUSTOM_DOMAIN}
	handle @immich {
		reverse_proxy immich-server:3001
	}

	@requests host requests.{$CUSTOM_DOMAIN}
	handle @requests {
		reverse_proxy streaming-overseerr:5055
	}

	@home host home.{$CUSTOM_DOMAIN}
	handle @home {
		reverse_proxy 192.168.4.67:8123
	}

	# personal
	@n8n host n8n.{$CUSTOM_DOMAIN}
	handle @n8n {
		import authelia
		reverse_proxy n8n:5678
	}

	@scrobbler host scrobbler.{$CUSTOM_DOMAIN}
	handle @scrobbler {
		import authelia
		reverse_proxy multi-scrobbler:9078
	}

	@maloja host maloja.{$CUSTOM_DOMAIN}
	handle @maloja {
		import authelia
		reverse_proxy maloja:42010
	}

	@git host git.{$CUSTOM_DOMAIN}
	handle @git {
		import authelia
		reverse_proxy forgejo:3000
	}

	@tools host tools.{$CUSTOM_DOMAIN}
	handle @tools {
		import authelia
		reverse_proxy it-tools:80
	}

	@vencloud host vencloud.{$CUSTOM_DOMAIN}
	handle @vencloud {
		reverse_proxy vencloud:8080
	}

	# dev
	# @code host code.{$CUSTOM_DOMAIN}
	# handle @code {
	# 	import authelia
	# 	reverse_proxy code-server:8443
	# }

	@qdirstat host qdirstat.{$CUSTOM_DOMAIN}
	handle @qdirstat {
		import authelia
		reverse_proxy qdirstat:5800
	}

	@dozzle host dozzle.{$CUSTOM_DOMAIN}
	handle @dozzle {
		import authelia
		reverse_proxy dozzle:8080
	}

	# arrs
	@prowlarr host prowlarr.{$CUSTOM_DOMAIN}
	handle @prowlarr {
		import authelia
		reverse_proxy streaming-prowlarr:9696
	}

	@radarr host radarr.{$CUSTOM_DOMAIN}
	handle @radarr {
		import authelia
		reverse_proxy streaming-radarr:7878
	}

	@sonarr host sonarr.{$CUSTOM_DOMAIN}
	handle @sonarr {
		import authelia
		reverse_proxy streaming-sonarr:8989
	}

	@bazarr host bazarr.{$CUSTOM_DOMAIN}
	handle @bazarr {
		import authelia
		reverse_proxy streaming-bazarr:6767
	}

	# @rclone host rclone.{$CUSTOM_DOMAIN}
	# handle @rclone {
	# 	import authelia
	# 	reverse_proxy streaming-rclone:19998
	# }

	# Fallback for otherwise unhandled domains
	handle {
		abort
	}
}
